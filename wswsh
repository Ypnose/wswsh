#!/usr/bin/mksh
# 2013-2014 - wswsh - Ypnose - http://ypnose.org
# Copyright (c) 2013-2014, Ypnose - All rights reserved.
# This project is under BSD (3-Clause) License
# See LICENSE for license details.
#set -x
RAC="$1"

function parse_config {
	if [[ -r ${RAC}/wswsh.conf && -r ${RAC}/includes/layout ]]; then
		. "${RAC}/wswsh.conf" && . "${RAC}/includes/layout"
	else
		print -u2 "Missing wswsh.conf / layout"
		exit 1
	fi
}

function get_structure {
	if [[ ! -d ${RAC}/src ]]; then
		print -u2 "src doesn't exist"
		exit 1
	fi
	[[ ! -d ${RAC}/dest ]] && mkdir "${RAC}/dest"

	if [[ -n $(find "${RAC}/src" -type d -print) ]]; then
		# The following line works with GNU find:
		# find "${RAC}/src" -type d -printf "dest/%P\0" | xargs -0 mkdir -p
		# I finally decided to write lines "compatible" with {Mir,Open}BSD. Here we go:
		cd "${RAC}/dest"
		( cd ../src; find . -type d -print0 ) | xargs -0 mkdir -p
		cd ..
	else
		print "No directory found. Nothing to create"
	fi
}

function do_backup {
	if [[ -n $BACKUP ]]; then
		if [[ -d $BACKUP ]]; then
			WHEN="$(date "+%Y-%m-%d")"
			rm -R "${BACKUP}/src_"* && cp -R "${RAC}/src" "${BACKUP}/src_${WHEN}"
			rm -R "${BACKUP}/includes_"* && cp -R "${RAC}/includes" "${BACKUP}/includes_${WHEN}"
			cp "${RAC}/wswsh" "${BACKUP}/wswsh" && cp "${RAC}/wswsh.conf" "${BACKUP}/wswsh.conf"
		else
			print -u2 "Directory doesn't exist!"
		fi
	fi
}

function get_interp {
	# We got the title from <h1> or # (for markdown). Add what you want...
	case $INTERP in
		# We can't use 'print " | "$0' because the function is used two times.
		smu) function pagetit { awk '/\#/{gsub(/^[\t ]+|#[\t ]+/,"");print $0;exit}' "$1"; };;
		ahrf.awk) function pagetit { awk '/:\ /{gsub(/:\ |\ :/,"");print $0;exit}' "$1"; };;
		*) function pagetit { awk '/<h1>/{gsub(/^[\t ]+|<h1>|<\/h1>.*/,"");print $0;exit}' "$1"; };;
	esac
}

function gen_page_skel {
	if [[ -n $CSSF && -r ${RAC}/src/${CSSF} ]]; then
		cp "${RAC}/src/${CSSF}" "${RAC}/dest/${CSSF}"
	fi

	if [[ -n $INTERP && -z $(whence $INTERP) ]]; then
		print -u2 "$INTERP not found"
		exit 1
	fi
	print "Generating pages..."
	get_interp
	cd "$RAC"
	find "src" -type f -iname "*.${EXT:-txt}" | while IFS=$'\n' read -r FILE; do
		FILENOSRC="${FILE#*/}"
		FILENOEXT="${FILENOSRC%%.*}"
		FILEXPORT="dest/${FILENOEXT}.html"
		FILETIT="$(pagetit "$FILE")"
		page_head >"$FILEXPORT"
		"${INTERP:-cat}" "$FILE" >>"$FILEXPORT"
		RET=$?
		if (( RET != 0 )); then
			print -u2 "Generating $FILE failed"
			exit 1
		fi
		page_foot >>"$FILEXPORT"
		(( COPY == 1 )) && cp "src/${FILENOSRC}" "dest/${FILENOSRC}"
	done

	# RSS / Atom
	if [[ -n $FEED ]] && (( FEED == 1 )); then
		[[ -n $ARTD && ! -d $ARTD ]] && print -u2 "The article directory is missing!" && exit 1
		# XML date, emulates $(date --rfc-3339=seconds) from GNU date.
		RDAT=$(LC_ALL=C date "+%Y-%m-%dT%H:%M:%SZ")
		RSSF="dest/${RSSDIR}atom.xml"
		# Tip: date format -> year-month-day
		SORD="$(find "${ARTD:-src/blog/}" -mindepth 2 -type f -iname "*.${EXT:-txt}" | while IFS=$'\n' read -r ART; do \
			awk '/<!--[\t ]*DATE/{gsub(/^[\t ]+|<!--[\t ]*DATE *: *|[\t ]*-->.*/,"");printf "%s",$0;exit}' $ART; \
			print " $ART"; done | sort -nr | awk '{gsub(/201[2-8]-[0-1][0-9]-[0-3][0-9] /,"");print}')"
		if [[ -z $SORD ]]; then
			print -u2 "No articles found inside ${ARTD:-src/blog/}"
			exit 1
		fi
		gen_site_xml >"$RSSF"
		print -- "$SORD" | while IFS=$'\n' read -r FILE; do
			# Don't need to enable a specific hour, let's assume I wrote the pages at midnight.
			RDADAT="$(awk '/<!--[\t ]*DATE/{gsub(/^[\t ]+|<!--[\t ]*DATE *: *|[\t ]*-->.*/,"");print $0"T00:00:00Z";exit}' $FILE)"
			RSSDES="$(awk '/<!--[\t ]*DESC/{gsub(/^[\t ]+|<!--[\t ]*DESC *: *|[\t ]*-->.*/,"");print $0;exit}' $FILE)"
			RSSTNOSRC="${FILE#*/}"
			RSSTNOEXT="${RSSTNOSRC%%.*}"
			FILETIT="$(pagetit "$FILE")"
			xml_content >>"$RSSF"
		done
		print '</feed>' >>"$RSSF"
	fi

	# We copy existing *.html files from src to dest.
	find "src" -type f -iname "*.html" | while IFS=$'\n' read -r LINEH; do
		if [[ -r dest/${LINEH#*/} ]]; then
			print "dest/${LINEH#*/} already exists"
			continue
		fi
		cp "$LINEH" "dest/${LINEH#*/}"
	done

	# Test if the file exists. Then find it/them and copy it/them to dest (supports multiple files with same name).
	if [[ -n $FIL ]]; then
		for y in $FIL; do
			if [[ -z $(find "src" -type f -name "$y") ]]; then
				print -- "$y is missing"
				continue
			fi
			find "src" -type f -name "$y" | while IFS=$'\n' read -r LINEF; do
				cp "src/${LINEF#*/}" "dest/${LINEF#*/}"
			done
		done
	fi

	cd ..
	TOT=$(find "${RAC}/dest" -type f | wc -l)
	print "Generated $TOT files"
}

if [[ -z $1 ]]; then
	print -u2 "usage: wswsh [website_root]"
	exit 1
fi

parse_config
#do_backup
get_structure
gen_page_skel

exit
